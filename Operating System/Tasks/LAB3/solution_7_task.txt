RUN TASK 1,2,3

TASK 1 CODE 

#include<sys/types.h>
#include<stdio.h>
#include<unistd.h>
int main(){
int pid;
pid = getpid();
printf("Process ID is %d\n", pid);
return 0;
}


TASK 2 CODE


#include<sys/types.h>
#include<stdio.h>
#include<unistd.h>


int main(){
int i;
printf("Process ID is %d\n", getpid());
for(i=0; i<=400;i++){
printf("i is %d\n", i);
}
return 0;
}

 
TASK 3 CODE 





#include<sys/types.h>
#include<stdio.h>
#include<unistd.h>

int main(){
int ppid;
ppid = getppid();
printf("Parent Process ID is %d\n", ppid);
return 0;
}



TASK 4 CODE 


#include<sys/types.h>
#include<stdio.h>
#include<unistd.h>

int main(){
fork();
printf("The PID is %d\n", getpid());
return 0;
}
TASK 5 CODE

#include<sys/types.h>
#include<stdio.h>
#include<unistd.h>

int main(){
int pid;
pid = fork();
if(pid==0){
printf("I am child, my process ID is %d\n", getpid());
printf("The parent process ID is %d\n", getppid());
}
else{
printf("I am parent, my process ID is %d\n", getpid());
printf("The parent process ID is %d\n", getppid());
}
return 0;
}


 
TASK 6 CODE 


#include<sys/types.h>
#include<stdio.h>
#include<unistd.h>

int main(){
int pid,i;
pid = fork();
if(pid==0){
printf("I am child, my process ID is %d\n", getpid());
printf("The parent process ID is %d\n", getppid());
}
else{
printf("I am parent, my process ID is %d\n", getpid());
printf("The parent process ID is %d\n", getppid());
}
scanf("%d",&i); //so that program halts for user input
return 0;
}

TASK 7 CODE 


/**
* This program forks a separate process using the fork()/exec()
system calls.
* * Figure 3.10*
// * @author Gagne, Galvin, Silberschatz Operating System Concepts -
Seventh Edition
* Copyright John Wiley & Sons - 2005. */
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include<stdlib.h>
int main(){
pid_t pid;
/* fork a child process */
pid = fork();
if (pid < 0) { /* error occurred */
fprintf(stderr, "Fork Failed\n");
exit(-1);
}
else if (pid == 0) { /* child process */
printf("I am the child %d\n",pid);
execlp("/bin/ls","ls",NULL);
}
else { /* parent process */
/* parent will wait for the child to complete */
printf("I am the parent %d\n",pid);
wait(NULL);    //commit it if show error       comit by ali
printf("Child Complete\n");
exit(0);
}
return 0;
}
